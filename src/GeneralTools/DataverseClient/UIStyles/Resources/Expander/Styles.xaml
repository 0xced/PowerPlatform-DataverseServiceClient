<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:uistyles="clr-namespace:Microsoft.PowerPlatform.Dataverse.Ui.Styles.Resources">
	<ResourceDictionary.MergedDictionaries>
        <uistyles:ThemeResources NormalModeResourcesPath="/Microsoft.PowerPlatform.Dataverse.Ui.Styles;component/Resources/Expander/BrushResourcesNormalMode.xaml"
								 HCModeResourcesPath="/Microsoft.PowerPlatform.Dataverse.Ui.Styles;component/Resources/Expander/BrushResourcesHCMode.xaml"/>
    </ResourceDictionary.MergedDictionaries>
	<!-- General -->
	<Geometry x:Key="ExpanderUpArrow" >M 1,1.5 L 4.5,5 L 8,1.5</Geometry>
	<Geometry x:Key="ExpanderDownArrow">M 1,4.5  L 4.5,1  L 8,4.5</Geometry>
	<Geometry x:Key="ExpanderLeftArrow">M 1,4.5  L 4.5,1  L 8,4.5</Geometry>
	<Geometry x:Key="ExpanderRightArrow">M 1,1.5 L 4.5,5 L 8,1.5</Geometry>

	<!--Expander Control specific styles-->
	<Style x:Key="ExpanderRightHeaderBaseStyle">
		<Setter Property="Control.Background" Value="Transparent"></Setter>
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border Padding="{TemplateBinding Padding}">
						<Grid SnapsToDevicePixels="False" VerticalAlignment="{TemplateBinding VerticalAlignment}" Margin="{TemplateBinding Margin}" HorizontalAlignment="Left">
							<Grid.RowDefinitions>
								<RowDefinition Height="20"/>
								<RowDefinition Height="*"/>
							</Grid.RowDefinitions>
                            <Image Source="/Microsoft.PowerPlatform.Dataverse.Ui.Styles;component/Resources/Images/ExpanderBackground.png" Grid.Row="1" Width="8" Stretch="Fill"/>
							<Grid Grid.Row="0" VerticalAlignment="Top" HorizontalAlignment="Center" Width="20">
								<Grid.LayoutTransform>
									<TransformGroup>
										<TransformGroup.Children>
											<TransformCollection>
												<RotateTransform Angle="-90"/>
											</TransformCollection>
										</TransformGroup.Children>
									</TransformGroup>
								</Grid.LayoutTransform>
								<Grid.Style>
									<Style TargetType="{x:Type Grid}">
										<Style.Triggers>
											<Trigger Property="IsMouseOver" Value="True">
												<Setter Property="Background" Value="{DynamicResource ExpnaderIsMoverBackground}"/>
											</Trigger>
										</Style.Triggers>
									</Style>
								</Grid.Style>
								<Path Stroke="{DynamicResource ExpanderArrowPathStroke}" StrokeThickness="2" HorizontalAlignment="Left" x:Name="arrow"
											SnapsToDevicePixels="false" Data="{StaticResource ExpanderRightArrow}" Margin="7,5,5,5"/>
							</Grid>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="true">
							<Setter Property="Data" TargetName="arrow" Value="{StaticResource ExpanderLeftArrow}"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource ExpanderIsMoverArrowPathStroke}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ExpanderUpHeaderBaseStyle">
		<Setter Property="Control.Background" Value="Transparent"></Setter>
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border Padding="{TemplateBinding Padding}">
						<Grid SnapsToDevicePixels="False" Background="{TemplateBinding Background}">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="19"/>
								<ColumnDefinition Width="*"/>
							</Grid.ColumnDefinitions>
							<Grid>
								<Grid.LayoutTransform>
									<TransformGroup>
										<TransformGroup.Children>
											<TransformCollection>
												<RotateTransform Angle="180"/>
											</TransformCollection>
										</TransformGroup.Children>
									</TransformGroup>
								</Grid.LayoutTransform>
								<Path Stroke="{DynamicResource ExpanderArrowPathStroke}" StrokeThickness="2" HorizontalAlignment="Center" x:Name="arrow" VerticalAlignment="Center"
										SnapsToDevicePixels="false" Data="{StaticResource ExpanderUpArrow}"/>
							</Grid>
							<ContentPresenter HorizontalAlignment="Stretch" Margin="4,0,19,0" VerticalAlignment="Center" SnapsToDevicePixels="True" Grid.Column="1" RecognizesAccessKey="True"/>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="true">
							<Setter Property="Data" TargetName="arrow" Value="{StaticResource ExpanderDownArrow}"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource ExpanderIsMoverArrowPathStroke}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ExpanderLeftHeaderBaseStyle">
		<Setter Property="Control.Background" Value="Transparent"></Setter>
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border Padding="{TemplateBinding Padding}">
						<Grid SnapsToDevicePixels="False" VerticalAlignment="{TemplateBinding VerticalAlignment}" Margin="{TemplateBinding Margin}" HorizontalAlignment="Right">
							<Grid.RowDefinitions>
								<RowDefinition Height="20"/>
								<RowDefinition Height="*"/>
							</Grid.RowDefinitions>
                            <Image Source="/Microsoft.PowerPlatform.Dataverse.Ui.Styles;component/Resources/Images/ExpanderBackground.png" Grid.Row="1" Width="8" Stretch="Fill"/>
							<Grid Grid.Row="0" VerticalAlignment="Top" HorizontalAlignment="Center" Width="20">
								<Grid.LayoutTransform>
									<TransformGroup>
										<TransformGroup.Children>
											<TransformCollection>
												<RotateTransform Angle="90"/>
											</TransformCollection>
										</TransformGroup.Children>
									</TransformGroup>
								</Grid.LayoutTransform>
								<Grid.Style>
									<Style TargetType="{x:Type Grid}">
										<Style.Triggers>
											<Trigger Property="IsMouseOver" Value="True">
												<Setter Property="Background" Value="{DynamicResource ExpnaderIsMoverBackground}"/>
											</Trigger>
										</Style.Triggers>
									</Style>
								</Grid.Style>
								<Path Stroke="{DynamicResource ExpanderArrowPathStroke}" StrokeThickness="2" HorizontalAlignment="Right" x:Name="arrow" Margin="7,5,5,5"
										SnapsToDevicePixels="false" Data="{StaticResource ExpanderRightArrow}"/>
							</Grid>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="true">
							<Setter Property="Data" TargetName="arrow" Value="{StaticResource ExpanderLeftArrow}"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource ExpanderIsMoverArrowPathStroke}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ExpanderDownHeaderBaseStyle">
		<Setter Property="Control.Background" Value="Transparent"></Setter>
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border Padding="{TemplateBinding Padding}">
						<Grid SnapsToDevicePixels="False" Background="{TemplateBinding Background}">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="19"/>
								<ColumnDefinition Width="*"/>
							</Grid.ColumnDefinitions>
							<Path Stroke="{DynamicResource ExpanderArrowPathStroke}" StrokeThickness="2" HorizontalAlignment="Center" x:Name="arrow" VerticalAlignment="Center"
									SnapsToDevicePixels="false" Data="{StaticResource ExpanderUpArrow}"/>
							<ContentPresenter HorizontalAlignment="Stretch" Margin="4,0,19,0" VerticalAlignment="Center" SnapsToDevicePixels="True" Grid.Column="1" RecognizesAccessKey="True"/>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="true">
							<Setter Property="Data" TargetName="arrow" Value="{StaticResource ExpanderLeftArrow}"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource ExpanderIsMoverArrowPathStroke}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ExpanderHeaderFocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Border>
						<Rectangle Stroke="Black" StrokeDashArray="1 2" StrokeThickness="1" Margin="0" SnapsToDevicePixels="true"/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--These styles can be overridden by the consumer to alter specific styles. Eg. Turn ON/OFF background image of the toggle button-->
	<Style x:Key="ExpanderRightHeaderStyle" BasedOn="{StaticResource ExpanderRightHeaderBaseStyle}"  TargetType="{x:Type ToggleButton}">
		<Setter Property="VerticalAlignment" Value="Stretch"/>
		<Setter Property="Margin" Value="2,2,4,0"/>
	</Style>
	<Style x:Key="ExpanderUpHeaderStyle" BasedOn="{StaticResource ExpanderUpHeaderBaseStyle}"  TargetType="{x:Type ToggleButton}">
	</Style>
	<Style x:Key="ExpanderLeftHeaderStyle" BasedOn="{StaticResource ExpanderLeftHeaderBaseStyle}"  TargetType="{x:Type ToggleButton}">
		<Setter Property="VerticalAlignment" Value="Stretch"/>
		<Setter Property="Margin" Value="2,2,4,0"/>
	</Style>
	<Style x:Key="ExpanderDownHeaderStyle" BasedOn="{StaticResource ExpanderDownHeaderBaseStyle}"  TargetType="{x:Type ToggleButton}">
		<Setter Property="Margin" Value="2,5,0,7"/>
	</Style>

	<Style x:Key="StretchExpanderStyle" TargetType="{x:Type Expander}">
		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
		<Setter Property="VerticalContentAlignment" Value="Stretch"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Expander}">
					<Border SnapsToDevicePixels="true" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3">
						<DockPanel>
							<ToggleButton FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" MinHeight="0" MinWidth="0" x:Name="HeaderSite" Style="{StaticResource ExpanderDownHeaderStyle}" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontStretch="{TemplateBinding FontStretch}" FontStyle="{TemplateBinding FontStyle}" FontWeight="{TemplateBinding FontWeight}" Foreground="{TemplateBinding Foreground}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" DockPanel.Dock="Top" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" AutomationProperties.Name="ExpanderToggle"/>
							<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" x:Name="ExpandSite" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="false" Visibility="Collapsed" DockPanel.Dock="Bottom"/>
						</DockPanel>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsExpanded" Value="true">
							<Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
						</Trigger>
						<Trigger Property="ExpandDirection" Value="Right">
							<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
							<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
							<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}"/>
						</Trigger>
						<Trigger Property="ExpandDirection" Value="Up">
							<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
							<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
							<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}"/>
						</Trigger>
						<Trigger Property="ExpandDirection" Value="Left">
							<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
							<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
							<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
</ResourceDictionary>